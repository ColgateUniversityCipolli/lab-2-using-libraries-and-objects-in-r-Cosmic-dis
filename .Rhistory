sub = c(list.dirs("Music")) # creates a vector of directories
# print(sub)
sub.direc = c()
for (direc in sub){ # loop through all directories
# if the the path of the directory includes 2 backslashes
if (str_count(direc, pattern = "/") == 2){
# add this directory (direc) to the new vector of desired directories
sub.direc = append(sub.direc, direc)
}
}
print(sub.direc)
# Step 3:
files = c()
# 1. and 2.
for (sub in sub.direc){ # loop through each directory in sub.direc
file = list.files(sub) # list the files in the current directory
# if the files has the ending ".wav"
if (sum(str_count(file, ".wav")) > 0){
# add the ".wav" file to the new vector of files
files = append(files, file)
}
}
# print(files)
# 3.
code.to.process = c()
for (sub in sub.direc){
music = list.files(sub) # variable containing the folders and the files in those folders
for (wav in music){
file = paste('"', sub, wav, '"', sep = "/") # pastes the current album subdirectory and the current track title together
# print(file)
remove = str_sub(wav, 1, length(wav)-6)
print(remove)# removes the ".wav" portion of the current file (wav)
track = str_split(remove, "-")
print(track)# removes the dashes to isolate the artist, album, and track names
new.track = track[[1]][length(track[[1]])]
print(new.track)# extracts the track name
artist = track[[1]][length(track[[1]])-1] # extracts the artist name
album = str_split(sub, "/") #
print(album)
only.album = album[[1]][length(album[[1]])]
output = paste(artist,".wav", "-", only.album, "-", new.track,".json", sep = "")
print(output)
exe = paste("streaming_extractor_music.exe", '"', '"', output, '"', sep = "")
code.to.process = append(code.to.process, exe)
# print(code.to.process)
}
}
print(code.to.process)
# Step 4
writeLines(code.to.process, "batfile.txt")
print(code.to.process)
# Task 2
# Step 0
install.packages("jsonlite")
library(jsonlite)
# Step 1
list.files()
json.files = c()
for (file in list.files()){
if (str_count(string = file, pattern = ".json") > 0){
# json.files = append(json.files, file)
split.json = str_split(file, "-")
track = split.json[[1]][length(split.json[[1]])]
json.track = str_sub(track, start = 1, end = length(track)-7)
json.album = split.json[[1]][length(split.json[[1]])-1]
json.artist = split.json[[1]][length(split.json[[1]])-2]
# print(json.track)
# print(json.album)
# print(json.artist)
}
}
# Step 2
file.data = fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json")
names(file.data)
# Step 3
average_loudness = file.data$"lowlevel"$"average_loudness"
cat("Average_Loudness: ", average_loudness)
spectral_energy_mean = file.data$"lowlevel"$"spectral_energy"$"mean"
cat("Mean: ", spectral_energy_mean)
bpm = file.data$"rhythm"$"bpm"
cat("BPM: ", bpm)
key_key = file.data$"tonal"$"key_key"
cat("Key_key: ", key_key)
length = file.data$"metadata"$"audio_properties"$"length"
cat("Length: ", length)
print(code.to.process)
# Task 1: Build a Batch File for Data Processing
# Step 0:
install.packages("stringr")
library(stringr)
# Step 1:
list.dirs("Music") # Lists sub-directories for fake MUSIC file
# Step 2:
str_count(string = "Music/PeopleStuff/bla", pattern = "/")
# str_count identifies how many backslashes until we arrive at the desired
# location from which we extract the desired files
sub = c(list.dirs("Music")) # creates a vector of directories
# print(sub)
sub.direc = c()
for (direc in sub){ # loop through all directories
# if the the path of the directory includes 2 backslashes
if (str_count(direc, pattern = "/") == 2){
# add this directory (direc) to the new vector of desired directories
sub.direc = append(sub.direc, direc)
}
}
print(sub.direc)
# Step 3:
files = c()
# 1. and 2.
for (sub in sub.direc){ # loop through each directory in sub.direc
file = list.files(sub) # list the files in the current directory
# if the files has the ending ".wav"
if (sum(str_count(file, ".wav")) > 0){
# add the ".wav" file to the new vector of files
files = append(files, file)
}
}
# print(files)
# 3.
code.to.process = c()
for (sub in sub.direc){
music = list.files(sub) # variable containing the folders and the files in those folders
for (wav in music){
file = paste('"', sub, wav, '"', sep = "/") # pastes the current album subdirectory and the current track title together
# print(file)
remove = str_sub(wav, 1, length(wav)-6)
print(remove)# removes the ".wav" portion of the current file (wav)
track = str_split(remove, "-")
print(track)# removes the dashes to isolate the artist, album, and track names
new.track = track[[1]][length(track[[1]])]
print(new.track)# extracts the track name
artist = track[[1]][length(track[[1]])-1] # extracts the artist name
album = str_split(sub, "/") #
print(album)
only.album = album[[1]][length(album[[1]])]
output = paste(artist, "-", only.album, "-", new.track,".json", sep = "")
print(output)
exe = paste("streaming_extractor_music.exe", ' "', new.track,".wav", '" ', '"', output, '"', sep = "")
code.to.process = append(code.to.process, exe)
# print(code.to.process)
}
}
print(code.to.process)
# Step 4
writeLines(code.to.process, "batfile.txt")
print(code.to.process)
# Task 2
# Step 0
install.packages("jsonlite")
library(jsonlite)
# Step 1
list.files()
json.files = c()
for (file in list.files()){
if (str_count(string = file, pattern = ".json") > 0){
# json.files = append(json.files, file)
split.json = str_split(file, "-")
track = split.json[[1]][length(split.json[[1]])]
json.track = str_sub(track, start = 1, end = length(track)-7)
json.album = split.json[[1]][length(split.json[[1]])-1]
json.artist = split.json[[1]][length(split.json[[1]])-2]
# print(json.track)
# print(json.album)
# print(json.artist)
}
}
# Step 2
file.data = fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json")
names(file.data)
# Step 3
average_loudness = file.data$"lowlevel"$"average_loudness"
cat("Average_Loudness: ", average_loudness)
spectral_energy_mean = file.data$"lowlevel"$"spectral_energy"$"mean"
cat("Mean: ", spectral_energy_mean)
bpm = file.data$"rhythm"$"bpm"
cat("BPM: ", bpm)
key_key = file.data$"tonal"$"key_key"
cat("Key_key: ", key_key)
length = file.data$"metadata"$"audio_properties"$"length"
cat("Length: ", length)
print(code.to.process)
print(code.to.process)
exe = paste("streaming\_extractor\_music.exe", ' "', new.track,".wav", '" ', '"', output, '"', sep = "")
# Task 1: Build a Batch File for Data Processing
# Step 0:
install.packages("stringr")
library(stringr)
# Step 1:
list.dirs("Music") # Lists sub-directories for fake MUSIC file
# Step 2:
str_count(string = "Music/PeopleStuff/bla", pattern = "/")
# str_count identifies how many backslashes until we arrive at the desired
# location from which we extract the desired files
sub = c(list.dirs("Music")) # creates a vector of directories
# print(sub)
sub.direc = c()
for (direc in sub){ # loop through all directories
# if the the path of the directory includes 2 backslashes
if (str_count(direc, pattern = "/") == 2){
# add this directory (direc) to the new vector of desired directories
sub.direc = append(sub.direc, direc)
}
}
print(sub.direc)
# Step 3:
files = c()
# 1. and 2.
for (sub in sub.direc){ # loop through each directory in sub.direc
file = list.files(sub) # list the files in the current directory
# if the files has the ending ".wav"
if (sum(str_count(file, ".wav")) > 0){
# add the ".wav" file to the new vector of files
files = append(files, file)
}
}
# print(files)
# 3.
code.to.process = c()
for (sub in sub.direc){
music = list.files(sub) # variable containing the folders and the files in those folders
for (wav in music){
file = paste('"', sub, wav, '"', sep = "/") # pastes the current album subdirectory and the current track title together
# print(file)
remove = str_sub(wav, 1, length(wav)-6)
print(remove)# removes the ".wav" portion of the current file (wav)
track = str_split(remove, "-")
print(track)# removes the dashes to isolate the artist, album, and track names
new.track = track[[1]][length(track[[1]])]
print(new.track)# extracts the track name
artist = track[[1]][length(track[[1]])-1] # extracts the artist name
album = str_split(sub, "/") #
print(album)
only.album = album[[1]][length(album[[1]])]
output = paste(artist, "-", only.album, "-", new.track,".json", sep = "")
print(output)
exe = paste("streaming\_extractor\_music.exe", ' "', new.track,".wav", '" ', '"', output, '"', sep = "")
print(code.to.process)
# Task 1: Build a Batch File for Data Processing
# Step 0:
install.packages("stringr")
library(stringr)
# Step 1:
list.dirs("Music") # Lists sub-directories for fake MUSIC file
# Step 2:
str_count(string = "Music/PeopleStuff/bla", pattern = "/")
# str_count identifies how many backslashes until we arrive at the desired
# location from which we extract the desired files
sub = c(list.dirs("Music")) # creates a vector of directories
# print(sub)
sub.direc = c()
for (direc in sub){ # loop through all directories
# if the the path of the directory includes 2 backslashes
if (str_count(direc, pattern = "/") == 2){
# add this directory (direc) to the new vector of desired directories
sub.direc = append(sub.direc, direc)
}
}
print(sub.direc)
# Step 3:
files = c()
# 1. and 2.
for (sub in sub.direc){ # loop through each directory in sub.direc
file = list.files(sub) # list the files in the current directory
# if the files has the ending ".wav"
if (sum(str_count(file, ".wav")) > 0){
# add the ".wav" file to the new vector of files
files = append(files, file)
}
}
# print(files)
# 3.
code.to.process = c()
for (sub in sub.direc){
music = list.files(sub) # variable containing the folders and the files in those folders
for (wav in music){
file = paste('"', sub, wav, '"', sep = "/") # pastes the current album subdirectory and the current track title together
# print(file)
remove = str_sub(wav, 1, length(wav)-6)
print(remove)# removes the ".wav" portion of the current file (wav)
track = str_split(remove, "-")
print(track)# removes the dashes to isolate the artist, album, and track names
new.track = track[[1]][length(track[[1]])]
print(new.track)# extracts the track name
artist = track[[1]][length(track[[1]])-1] # extracts the artist name
album = str_split(sub, "/") #
print(album)
only.album = album[[1]][length(album[[1]])]
output = paste(artist, "-", only.album, "-", new.track,".json", sep = "")
print(output)
exe = paste("streaming\_extractor\_music.exe", ' "', new.track,".wav", '" ', '"', output, '"', sep = "")
# Task 1: Build a Batch File for Data Processing
# Step 0:
install.packages("stringr")
library(stringr)
# Step 1:
list.dirs("Music") # Lists sub-directories for fake MUSIC file
# Step 2:
str_count(string = "Music/PeopleStuff/bla", pattern = "/")
# str_count identifies how many backslashes until we arrive at the desired
# location from which we extract the desired files
sub = c(list.dirs("Music")) # creates a vector of directories
# print(sub)
sub.direc = c()
for (direc in sub){ # loop through all directories
# if the the path of the directory includes 2 backslashes
if (str_count(direc, pattern = "/") == 2){
# add this directory (direc) to the new vector of desired directories
sub.direc = append(sub.direc, direc)
}
}
print(sub.direc)
# Step 3:
files = c()
# 1. and 2.
for (sub in sub.direc){ # loop through each directory in sub.direc
file = list.files(sub) # list the files in the current directory
# if the files has the ending ".wav"
if (sum(str_count(file, ".wav")) > 0){
# add the ".wav" file to the new vector of files
files = append(files, file)
}
}
# print(files)
# 3.
code.to.process = c()
for (sub in sub.direc){
music = list.files(sub) # variable containing the folders and the files in those folders
for (wav in music){
file = paste('"', sub, wav, '"', sep = "/") # pastes the current album subdirectory and the current track title together
# print(file)
remove = str_sub(wav, 1, length(wav)-6)
print(remove)# removes the ".wav" portion of the current file (wav)
track = str_split(remove, "-")
print(track)# removes the dashes to isolate the artist, album, and track names
new.track = track[[1]][length(track[[1]])]
print(new.track)# extracts the track name
artist = track[[1]][length(track[[1]])-1] # extracts the artist name
album = str_split(sub, "/") #
print(album)
only.album = album[[1]][length(album[[1]])]
output = paste(artist, "-", only.album, "-", new.track,".json", sep = "")
print(output)
exe = paste("streaming_extractor_music.exe", ' "', new.track,".wav", '" ', '"', output, '"', sep = "")
code.to.process = append(code.to.process, exe)
# print(code.to.process)
}
}
print(code.to.process)
# Step 4
writeLines(code.to.process, "batfile.txt")
print(code.to.process)
# Task 2
# Step 0
install.packages("jsonlite")
library(jsonlite)
# Step 1
list.files()
json.files = c()
for (file in list.files()){
if (str_count(string = file, pattern = ".json") > 0){
# json.files = append(json.files, file)
split.json = str_split(file, "-")
track = split.json[[1]][length(split.json[[1]])]
json.track = str_sub(track, start = 1, end = length(track)-7)
json.album = split.json[[1]][length(split.json[[1]])-1]
json.artist = split.json[[1]][length(split.json[[1]])-2]
# print(json.track)
# print(json.album)
# print(json.artist)
}
}
# Step 2
file.data = fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json")
names(file.data)
# Step 3
average_loudness = file.data$"lowlevel"$"average_loudness"
cat("Average_Loudness: ", average_loudness)
spectral_energy_mean = file.data$"lowlevel"$"spectral_energy"$"mean"
cat("Mean: ", spectral_energy_mean)
bpm = file.data$"rhythm"$"bpm"
cat("BPM: ", bpm)
key_key = file.data$"tonal"$"key_key"
cat("Key_key: ", key_key)
length = file.data$"metadata"$"audio_properties"$"length"
cat("Length: ", length)
print(code.to.process)
print(album)
json.files = c()
for (file in list.files()){
if (str_count(string = file, pattern = ".json") > 0){
# json.files = append(json.files, file)
split.json = str_split(file, "-")
track = split.json[[1]][length(split.json[[1]])]
json.track = str_sub(track, start = 1, end = length(track)-7)
json.album = split.json[[1]][length(split.json[[1]])-1]
json.artist = split.json[[1]][length(split.json[[1]])-2]
# print(json.track)
# print(json.album)
# print(json.artist)
}
}
# Task 1: Build a Batch File for Data Processing
# Step 0:
install.packages("stringr")
library(stringr)
# Step 1:
list.dirs("Music") # Lists sub-directories for fake MUSIC file
# Step 2:
str_count(string = "Music/PeopleStuff/bla", pattern = "/")
# str_count identifies how many backslashes until we arrive at the desired
# location from which we extract the desired files
sub = c(list.dirs("Music")) # creates a vector of directories
# print(sub)
sub.direc = c()
for (direc in sub){ # loop through all directories
# if the the path of the directory includes 2 backslashes
if (str_count(direc, pattern = "/") == 2){
# add this directory (direc) to the new vector of desired directories
sub.direc = append(sub.direc, direc)
}
}
print(sub.direc)
# Step 3:
files = c()
# 1. and 2.
for (sub in sub.direc){ # loop through each directory in sub.direc
file = list.files(sub) # list the files in the current directory
# if the files has the ending ".wav"
if (sum(str_count(file, ".wav")) > 0){
# add the ".wav" file to the new vector of files
files = append(files, file)
}
}
# print(files)
# 3.
code.to.process = c()
for (sub in sub.direc){
music = list.files(sub) # variable containing the folders and the files in those folders
for (wav in music){
file = paste('"', sub, wav, '"', sep = "/") # pastes the current album subdirectory and the current track title together
# print(file)
remove = str_sub(wav, 1, length(wav)-6) # removes the ".wav" portion of the current file (wav)
# print(remove)
track = str_split(remove, "-") # removes the dashes to isolate the artist, album, and track names
# print(track)
new.track = track[[1]][length(track[[1]])] # extracts the track name
# print(new.track)
artist = track[[1]][length(track[[1]])-1] # extracts the artist name
album = str_split(sub, "/") # extracts all the album information
# print(album)
only.album = album[[1]][length(album[[1]])] # removes just the album name from all the album information
output = paste(artist, "-", only.album, "-", new.track,".json", sep = "") # pastes the artist, album, and track in .json form
# print(output)
exe = paste("streaming_extractor_music.exe", ' "', new.track,".wav", '" ', '"', output, '"', sep = "") # creates a combined string of various parts of the files according to a given template
code.to.process = append(code.to.process, exe)
# print(code.to.process)
}
}
# code.to.process contains all collections of strings containing the track.wav, the whole_album_info.json
print(code.to.process)
# Step 4
# creates a text file with all the track and album infos
writeLines(code.to.process, "batfile.txt")
# Task 2
# Step 0
install.packages("jsonlite")
library(jsonlite)
# Step 1
json.files = c()
for (file in list.files()){
if (str_count(string = file, pattern = ".json") > 0){
# json.files = append(json.files, file)
split.json = str_split(file, "-")
track = split.json[[1]][length(split.json[[1]])]
json.track = str_sub(track, start = 1, end = length(track)-7)
json.album = split.json[[1]][length(split.json[[1]])-1]
json.artist = split.json[[1]][length(split.json[[1]])-2]
# print(json.track)
# print(json.album)
# print(json.artist)
}
}
# Step 2
file.data = fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json")
names(file.data)
# Step 3
average_loudness = file.data$"lowlevel"$"average_loudness"
cat("Average_Loudness: ", average_loudness)
spectral_energy_mean = file.data$"lowlevel"$"spectral_energy"$"mean"
cat("Mean: ", spectral_energy_mean)
bpm = file.data$"rhythm"$"bpm"
cat("BPM: ", bpm)
key_key = file.data$"tonal"$"key_key"
cat("Key_key: ", key_key)
length = file.data$"metadata"$"audio_properties"$"length"
cat("Length: ", length)
json.files = c()
for (file in list.files()){
if (str_count(string = file, pattern = ".json") > 0){
# json.files = append(json.files, file)
split.json = str_split(file, "-")
track = split.json[[1]][length(split.json[[1]])]
json.track = str_sub(track, start = 1, end = length(track)-7)
json.album = split.json[[1]][length(split.json[[1]])-1]
json.artist = split.json[[1]][length(split.json[[1]])-2]
# print(json.track)
# print(json.album)
# print(json.artist)
}
}
names(file.data)
