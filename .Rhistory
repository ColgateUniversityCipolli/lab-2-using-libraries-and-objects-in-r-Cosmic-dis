install.packages("tinytex")
library(tinytex)
install_tinytex()
install.packages("knitr")
\end{document}
\end{document}
Hello World!
install.packages("xtable")
install.packages("palmerpenguins")
install.packages("aRtsy")
# Chunk 2
library("aRtsy")
# Chunk 4
# help("aRtsy")
# Chunk 6
# Chunk 8
# Chunk 2
library("aRtsy")
# Chunk 4
help("aRtsy")
# Chunk 6
# Chunk 8
# Chunk 2
library("aRtsy")
# Chunk 4
canvas_collatz()
# Chunk 2
library("aRtsy")
# Chunk 4
canvas_collatz(colors = colorPalette("tuscany3"))
# Chunk 6
# Chunk 8
# Chunk 2
library("aRtsy")
# Chunk 4
canvas_collatz(colors = colorPalette("tuscany3"))
# Chunk 6
# Chunk 8
# Chunk 2
library("aRtsy")
# Chunk 4
canvas_collatz(colors = colorPalette("tuscany3"))
# Chunk 6
# Chunk 8
# Chunk 2
library("aRtsy")
# Chunk 4
canvas_collatz(colors = colorPalette("tuscany3"))
# Chunk 6
# Chunk 8
# Chunk 2
library("aRtsy")
# Chunk 4
canvas_collatz(colors = colorPalette("tuscany3"))
# Chunk 6
set.seed(1313)
canvas_collatz(colors = colorPalette("tuscany3"))
# Chunk 8
# Chunk 2
library("aRtsy")
# Chunk 4
canvas_collatz(colors = colorPalette("tuscany3"))
# Chunk 6
set.seed(1313)
canvas_collatz(colors = colorPalette("tuscany3"))
# Chunk 8
library("palmerspenguins")
library("palmerpenguins")
citation("palmerpenguins")
library("palmerpenguins")
citation("palmerpenguins")
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\item Make another plot using the tutorial -- feel free to be creative here!
\item Now, create a new Collatz conjecture plot by specifying the following
\item Make another plot using the tutorial -- feel free to be creative here!
help("aRtsy")
?canvas_collatz
citation(aRtsy)
citation("aRtsy")
?which()
for (sub in sub.direc){
music = list.files(sub)
for (wav in music){
file = paste(sub, wav, sep = "/")
remove = str_sub(wav, 1, length(wav)-6)
name = str_split(remove, "-")
new.name = name[[1]][length(name[[1]])]
artist = name[[1]][length(name[[1]])-1]
album = str_split(sub, "/")
print(album)
only.album = album[[1]][length(album[[1]])]
output = paste(artist, only.album, new.name,".json", sep = "-")
print(output)
}
}
code.to.process = c()
for (sub in sub.direc){
music = list.files(sub)
for (wav in music){
file = paste(sub, wav, sep = "/")
remove = str_sub(wav, 1, length(wav)-6)
name = str_split(remove, "-")
new.name = name[[1]][length(name[[1]])]
artist = name[[1]][length(name[[1]])-1]
album = str_split(sub, "/")
print(album)
only.album = album[[1]][length(album[[1]])]
output = paste(artist, only.album, new.name,".json", sep = "-")
print(output)
}
}
album = str_split(sub, "/")
setwd("~/Documents/GitHub/lab-2-using-libraries-and-objects-in-r-Cosmic-dis")
for (sub in sub.direc){
music = list.files(sub)
for (wav in music){
file = paste(sub, wav, sep = "/")
remove = str_sub(wav, 1, length(wav)-6)
name = str_split(remove, "-")
new.name = name[[1]][length(name[[1]])]
artist = name[[1]][length(name[[1]])-1]
album = str_split(sub, "/")
print(album)
only.album = album[[1]][length(album[[1]])]
output = paste(artist, only.album, new.name,".json", sep = "-")
print(output)
}
}
print(album)
output = paste(artist, only.album, new.name,".json", sep = "-")
print(output)
for (wav in music){
file = paste(sub, wav, sep = "/")
remove = str_sub(wav, 1, length(wav)-6)
name = str_split(remove, "-")
new.name = name[[1]][length(name[[1]])]
artist = name[[1]][length(name[[1]])-1]
album = str_split(sub, "/")
print(album)
only.album = album[[1]][length(album[[1]])]
output = paste(artist, only.album, new.name,".json", sep = "-")
print(output)
}
code.to.process = c()
for (sub in sub.direc){
music = list.files(sub)
for (wav in music){
file = paste(sub, wav, sep = "/")
remove = str_sub(wav, 1, length(wav)-6)
name = str_split(remove, "-")
new.name = name[[1]][length(name[[1]])]
artist = name[[1]][length(name[[1]])-1]
album = str_split(sub, "/")
print(album)
only.album = album[[1]][length(album[[1]])]
output = paste(artist, "-", only.album, "-", new.name,".json", sep = "")
print(output)
}
}
for (sub in sub.direc){
music = list.files(sub)
for (wav in music){
file = paste(sub, wav, sep = "/")
remove = str_sub(wav, 1, length(wav)-6)
name = str_split(remove, "-")
new.name = name[[1]][length(name[[1]])]
artist = name[[1]][length(name[[1]])-1]
album = str_split(sub, "/")
print(album)
only.album = album[[1]][length(album[[1]])]
output = paste(artist, "-", only.album, "-", new.name,".json", sep = "")
print(output)
}
}
files = append(files, file)
# Task 1: Build a Batch File for Data Processing
# Step 0:
# install.packages("stringr")
# library(stringr)
# Step 1:
list.dirs("Music")
# Step 2:
str_count(string = "Music/PeopleStuff/bla", pattern = "/")
library(stringr)
# Step 1:
list.dirs("Music")
code.to.process = c()
for (sub in sub.direc){
music = list.files(sub)
for (wav in music){
file = paste(sub, wav, sep = "/")
remove = str_sub(wav, 1, length(wav)-6)
name = str_split(remove, "-")
new.name = name[[1]][length(name[[1]])]
artist = name[[1]][length(name[[1]])-1]
album = str_split(sub, "/")
print(album)
only.album = album[[1]][length(album[[1]])]
output = paste(artist, "-", only.album, "-", new.name,".json", sep = "")
print(output)
}
}
sub.direc = c()
for (direc in sub){
if (str_count(direc, pattern = "/") == 2){
sub.direc = append(sub.direc, direc)
}
}
print(files)
# Task 1: Build a Batch File for Data Processing
# Step 0:
install.packages("stringr")
library(stringr)
# Step 1:
list.dirs("Music")
# Step 2:
str_count(string = "Music/PeopleStuff/bla", pattern = "/")
sub = c(list.dirs("Music"))
sub.direc = c()
for (direc in sub){
if (str_count(direc, pattern = "/") == 2){
sub.direc = append(sub.direc, direc)
}
}
print(sub.direc)
# Step 3:
files = c()
for (sub in sub.direc){
file = list.files(sub)
if (sum(str_count(file, ".wav")) > 0){
files = append(files, file)
}
}
print(files)
code.to.process = c()
for (sub in sub.direc){
music = list.files(sub)
for (wav in music){
file = paste(sub, wav, sep = "/")
remove = str_sub(wav, 1, length(wav)-6)
name = str_split(remove, "-")
new.name = name[[1]][length(name[[1]])]
artist = name[[1]][length(name[[1]])-1]
album = str_split(sub, "/")
print(album)
only.album = album[[1]][length(album[[1]])]
output = paste(artist, "-", only.album, "-", new.name,".json", sep = "")
print(output)
}
}
code.to.process = c()
for (sub in sub.direc){
music = list.files(sub)
for (wav in music){
file = paste(sub, wav, sep = "/")
remove = str_sub(wav, 1, length(wav)-6)
name = str_split(remove, "-")
new.name = name[[1]][length(name[[1]])]
artist = name[[1]][length(name[[1]])-1]
album = str_split(sub, "/")
print(album)
only.album = album[[1]][length(album[[1]])]
output = paste(artist, "-", only.album, "-", new.name,".json", sep = "")
print(output)
}
}
for (sub in sub.direc){
music = list.files(sub)
for (wav in music){
file = paste(sub, wav, sep = "/")
remove = str_sub(wav, 1, length(wav)-6)
name = str_split(remove, "-")
new.name = name[[1]][length(name[[1]])]
artist = name[[1]][length(name[[1]])-1]
album = str_split(sub, "/")
print(album)
only.album = album[[1]][length(album[[1]])]
output = paste(artist, "-", only.album, "-", new.name,".json", sep = "")
print(output)
}
}
print(output)
print(album)
output = paste(artist, "-", only.album, "-", new.name,".json", sep = "")
for (sub in sub.direc){
music = list.files(sub)
for (wav in music){
file = paste(sub, wav, sep = "/")
remove = str_sub(wav, 1, length(wav)-6)
name = str_split(remove, "-")
new.name = name[[1]][length(name[[1]])]
artist = name[[1]][length(name[[1]])-1]
album = str_split(sub, "/")
print(album)
only.album = album[[1]][length(album[[1]])]
output = paste(artist, "-", only.album, "-", new.name,".json", sep = "")
print(output)
}
}
sub = c(list.dirs("Music"))
sub.direc = c()
for (direc in sub){
if (str_count(direc, pattern = "/") == 2){
sub.direc = append(sub.direc, direc)
}
}
