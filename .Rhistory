print(code.to.process)
code.to.process = c()
for (sub in sub.direc){
music = list.files(sub)
for (wav in music){
file = paste(sub, wav, sep = "/")
print(file)
remove = str_sub(wav, 1, length(wav)-6)
name = str_split(remove, "-")
new.name = name[[1]][length(name[[1]])]
artist = name[[1]][length(name[[1]])-1]
album = str_split(sub, "/")
#print(album)
only.album = album[[1]][length(album[[1]])]
output = paste(artist, "-", only.album, "-", new.name,".json", sep = "")
#print(output)
exe = paste("streaming_extractor_music.exe", '"', file, '"', '"', output, '"', "")
code.to.process = append(code.to.process, exe)
print(code.to.process)
}
}
code.to.process = c()
for (sub in sub.direc){
music = list.files(sub)
for (wav in music){
file = paste(sub, wav, sep = "/")
print(file)
remove = str_sub(wav, 1, length(wav)-6)
name = str_split(remove, "-")
new.name = name[[1]][length(name[[1]])]
artist = name[[1]][length(name[[1]])-1]
album = str_split(sub, "/")
#print(album)
only.album = album[[1]][length(album[[1]])]
output = paste(artist, "-", only.album, "-", new.name,".json", sep = "")
#print(output)
exe = paste("streaming_extractor_music.exe", '"', file, '"', '"', output, '"', "")
code.to.process = append(code.to.process, exe)
# print(code.to.process)
}
}
code.to.process = c()
for (sub in sub.direc){
music = list.files(sub)
for (wav in music){
file = paste(sub, wav, sep = "/")
# print(file)
remove = str_sub(wav, 1, length(wav)-6)
name = str_split(remove, "-")
new.name = name[[1]][length(name[[1]])]
artist = name[[1]][length(name[[1]])-1]
album = str_split(sub, "/")
#print(album)
only.album = album[[1]][length(album[[1]])]
output = paste(artist, "-", only.album, "-", new.name,".json", sep = "")
#print(output)
exe = paste("streaming_extractor_music.exe", '"', file, '"', '"', output, '"', "")
code.to.process = append(code.to.process, exe)
# print(code.to.process)
}
}
print(code.to.process)
code.to.process = c()
for (sub in sub.direc){
music = list.files(sub)
for (wav in music){
file = paste(sub, wav, sep = "/")
# print(file)
remove = str_sub(wav, 1, length(wav)-6)
name = str_split(remove, "-")
new.name = name[[1]][length(name[[1]])]
artist = name[[1]][length(name[[1]])-1]
album = str_split(sub, "/")
#print(album)
only.album = album[[1]][length(album[[1]])]
output = paste(artist, "-", only.album, "-", new.name,".json", sep = "")
#print(output)
exe = paste("streaming_extractor_music.exe", '"', new.name,".wav", '"', '"', output, '"', "")
code.to.process = append(code.to.process, exe)
# print(code.to.process)
}
}
print(code.to.process)
code.to.process = c()
for (sub in sub.direc){
music = list.files(sub)
for (wav in music){
file = paste(sub, wav, sep = "/")
# print(file)
remove = str_sub(wav, 1, length(wav)-6)
name = str_split(remove, "-")
new.name = name[[1]][length(name[[1]])]
artist = name[[1]][length(name[[1]])-1]
album = str_split(sub, "/")
#print(album)
only.album = album[[1]][length(album[[1]])]
output = paste(artist, "-", only.album, "-", new.name,".json", sep = "")
#print(output)
exe = paste("streaming_extractor_music.exe", '"', new.name,".wav", '"', '"', output, '"', sep = "")
code.to.process = append(code.to.process, exe)
# print(code.to.process)
}
}
print(code.to.process)
code.to.process = c()
for (sub in sub.direc){
music = list.files(sub)
for (wav in music){
file = paste(sub, wav, sep = "/")
# print(file)
remove = str_sub(wav, 1, length(wav)-6)
name = str_split(remove, "-")
new.name = name[[1]][length(name[[1]])]
artist = name[[1]][length(name[[1]])-1]
album = str_split(sub, "/")
#print(album)
only.album = album[[1]][length(album[[1]])]
output = paste(artist, "-", only.album, "-", new.name,".json", sep = "")
#print(output)
exe = paste("streaming_extractor_music.exe", ' "', new.name,".wav", '" ', '"', output, '"', sep = "")
code.to.process = append(code.to.process, exe)
# print(code.to.process)
}
}
print(code.to.process)
help(writelines())
# print(code.to.process)
help(writelines
# print(code.to.process)
help(writelines)
help(writelines)
help(??writelines)
print(batfile.txt)
batfile.txt = writelines(code.to.process)
batfile.txt = writeLines(code.to.process)
print(batfile.txt)
x
print(batfile.txt)
batfile.txt = writeLines(code.to.process)
writeLines(code.to.process, filecon)
filecon = file("batfile.txt")
writeLines(code.to.process, filecon)
close(filecon)
filecon = file("batfile.txt")
writeLines(code.to.process, filecon)
close(filecon)
print(filecon)
filecon = "batfile.txt"
writeLines(code.to.process, filecon)
cat("Successful")
install.packages("jsonlite")
library(jsonlite)
list.dirs("lab-2-using-libraries-and-objects-in-r-Cosmic-dis")
list.dirs("GitHub")
list.dirs.files("lab-2-using-libraries-and-objects-in-r-Cosmic-dis")
list.dirs("GitHub")
setwd("~/Documents/GitHub")
list.dirs("lab-2-using-libraries-and-objects-in-r-Cosmic-dis")
setwd("~/Documents/GitHub/lab-2-using-libraries-and-objects-in-r-Cosmic-dis")
list.dirs()
# Step 1
list.files()
split.json = str_split(file, "-")
json.track = split.json[[1]][length(split.json[[1]])]
json.artist = split.json[[1]][length(split.json[[1]])]
print(json.track)
print(json.artist)
for (file in list.files()){
if (str_count(string = file, pattern = ".json") > 0){
# json.files = append(json.files, file)
split.json = str_split(file, "-")
json.track = split.json[[1]][length(split.json[[1]])]
json.artist = split.json[[1]][length(split.json[[1]])]
print(json.track)
print(json.artist)
}
}
for (file in list.files()){
if (str_count(string = file, pattern = ".json") > 0){
# json.files = append(json.files, file)
split.json = str_split(file, "-")
json.track = split.json[[1]][length(split.json[[1]])]
json.artist = split.json[[1]][length(split.json[[1]])-1]
print(json.track)
print(json.artist)
}
}
for (file in list.files()){
if (str_count(string = file, pattern = ".json") > 0){
# json.files = append(json.files, file)
split.json = str_split(file, "-")
json.track = split.json[[1]][length(split.json[[1]])]
json.artist = split.json[[1]][length(split.json[[1]])-1]
json.album = split.json[[1]][length(split.json[[1]])-2]
print(json.track)
print(json.artist)
print(json.album)
}
}
list.files()
json.files = c()
for (file in list.files()){
if (str_count(string = file, pattern = ".json") > 0){
# json.files = append(json.files, file)
split.json = str_split(file, "-")
json.track = split.json[[1]][length(split.json[[1]])]
str_sub(json.track, length(json.track)-5, length(json.track))
json.artist = split.json[[1]][length(split.json[[1]])-1]
json.album = split.json[[1]][length(split.json[[1]])-2]
print(json.track)
print(json.artist)
print(json.album)
}
}
list.files()
json.files = c()
for (file in list.files()){
if (str_count(string = file, pattern = ".json") > 0){
# json.files = append(json.files, file)
split.json = str_split(file, "-")
json.track = split.json[[1]][length(split.json[[1]])]
str_sub(json.track, start = 1, end = length(json.track)-5)
json.artist = split.json[[1]][length(split.json[[1]])-1]
json.album = split.json[[1]][length(split.json[[1]])-2]
print(json.track)
print(json.artist)
print(json.album)
}
}
list.files()
json.files = c()
for (file in list.files()){
if (str_count(string = file, pattern = ".json") > 0){
# json.files = append(json.files, file)
split.json = str_split(file, "-")
track = split.json[[1]][length(split.json[[1]])]
json.track = str_sub(track, start = 1, end = length(track)-5)
json.artist = split.json[[1]][length(split.json[[1]])-1]
json.album = split.json[[1]][length(split.json[[1]])-2]
print(json.track)
print(json.artist)
print(json.album)
}
}
for (file in list.files()){
if (str_count(string = file, pattern = ".json") > 0){
# json.files = append(json.files, file)
split.json = str_split(file, "-")
track = split.json[[1]][length(split.json[[1]])]
json.track = str_sub(track, start = 1, end = length(track)-7)
json.artist = split.json[[1]][length(split.json[[1]])-1]
json.album = split.json[[1]][length(split.json[[1]])-2]
print(json.track)
print(json.artist)
print(json.album)
}
}
for (file in list.files()){
if (str_count(string = file, pattern = ".json") > 0){
# json.files = append(json.files, file)
split.json = str_split(file, "-")
track = split.json[[1]][length(split.json[[1]])]
json.track = str_sub(track, start = 1, end = length(track)-7)
json.album = split.json[[1]][length(split.json[[1]])-1]
json.artist = split.json[[1]][length(split.json[[1]])-2]
print(json.track)
print(json.artist)
print(json.album)
}
}
json.files = c()
for (file in list.files()){
if (str_count(string = file, pattern = ".json") > 0){
# json.files = append(json.files, file)
split.json = str_split(file, "-")
track = split.json[[1]][length(split.json[[1]])]
json.track = str_sub(track, start = 1, end = length(track)-7)
json.artist = split.json[[1]][length(split.json[[1]])-1]
json.album = split.json[[1]][length(split.json[[1]])-2]
print(json.track)
print(json.artist)
print(json.album)
}
}
for (file in list.files()){
if (str_count(string = file, pattern = ".json") > 0){
# json.files = append(json.files, file)
split.json = str_split(file, "-")
track = split.json[[1]][length(split.json[[1]])]
json.track = str_sub(track, start = 1, end = length(track)-7)
json.artist = split.json[[1]][length(split.json[[1]])-1]
json.album = split.json[[1]][length(split.json[[1]])-2]
print(json.track)
print(json.album)
print(json.artist)
}
}
json.files = c()
for (file in list.files()){
if (str_count(string = file, pattern = ".json") > 0){
# json.files = append(json.files, file)
split.json = str_split(file, "-")
track = split.json[[1]][length(split.json[[1]])]
json.track = str_sub(track, start = 1, end = length(track)-7)
json.album = split.json[[1]][length(split.json[[1]])-1]
json.artist = split.json[[1]][length(split.json[[1]])-2]
print(json.track)
print(json.album)
print(json.artist)
}
}
fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios)")
fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json")
average_loudness
class(fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json"))
average_loudness = file.data$"average_loudness"
file.data = fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json")
# Step 3
average_loudness = file.data$"average_loudness"
print(average_loudness)
average_loudness = file.data$"average_loudness"
print(average_loudness)
average_loudness = file.data$"average_loudness"
file.data = fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json")
# Step 3
average_loudness = file.data$"lowlevel$average_loudness"
print(average_loudness)
file.data = fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json")
# Step 3
average_loudness = file.data$"lowlevel"$"average_loudness"
print(average_loudness)
spec_ene_mean = file.data$"spectral_energy"$"mean"
print(spec_ene_mean)
file.data = fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json")
# Step 3
average_loudness = file.data$"lowlevel"$"average_loudness"
print(average_loudness)
spec_ene_mean = file.data$"spectral_energy"$"mean"
print(spec_ene_mean)
file.data = fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json")
# Step 3
average_loudness = file.data$"lowlevel"$"average_loudness"
print(average_loudness)
spectral_energy = file.data$"spectral_energy"
mean = spectral_energy$mean
print(mean)
# Step 3
average_loudness = file.data$"lowlevel"$"average_loudness"
print(average_loudness)
spectral_energy = file.data$"spectral_energy"
mean = spectral_energy$"mean"
print(mean)
file.data = fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json")
# Step 3
average_loudness = file.data$"lowlevel"$"average_loudness"
print(average_loudness)
spectral_energy = file.data$"spectral_energy"
mean = spectral_energy$"mean"
print(mean)
le.data = fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json")
str(file.data)
name(file.data)
names(file.data)
file.data = fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json")
names(file.data)
# Step 3
average_loudness = file.data$"lowlevel"$"average_loudness"
print(average_loudness)
spectral_energy_mean = file.data$"lowlevel"$"spectral_energy"$"mean"
print(spectral_energy_mean)
file.data = fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json")
names(file.data)
# Step 3
average_loudness = file.data$"lowlevel"$"average_loudness"
print(average_loudness)
spectral_energy_mean = file.data$"lowlevel"$"spectral_energy"$"mean"
print("Mean:" spectral_energy_mean)
file.data = fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json")
names(file.data)
# Step 3
average_loudness = file.data$"lowlevel"$"average_loudness"
print(average_loudness)
spectral_energy_mean = file.data$"lowlevel"$"spectral_energy"$"mean"
print("Mean: ",  spectral_energy_mean)
spectral_energy_mean = file.data$"lowlevel"$"spectral_energy"$"mean"
cat("Mean: ", spectral_energy_mean)
file.data = fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json")
names(file.data)
# Step 3
average_loudness = file.data$"lowlevel"$"average_loudness"
cat("Average_Loudness: ", average_loudness)
spectral_energy_mean = file.data$"lowlevel"$"spectral_energy"$"mean"
cat("Mean: ", spectral_energy_mean)
bpm = file.data$"rythm"$"bpm"
cat("BPM: ", bpm)
bpm = file.data$"rhythm"$"bpm"
cat("BPM: ", bpm)
key_key = file.data$"tonal"$"key_key"
cat("Key_key: ", key_key)
average_loudness = file.data$"lowlevel"$"average_loudness"
cat("Average_Loudness: ", average_loudness)
spectral_energy_mean = file.data$"lowlevel"$"spectral_energy"$"mean"
cat("Mean: ", spectral_energy_mean)
bpm = file.data$"rhythm"$"bpm"
cat("BPM: ", bpm)
key_key = file.data$"tonal"$"key_key"
cat("Key_key: ", key_key)
length = file.data$"metadata"$"length"
cat("Length: ", length)
average_loudness = file.data$"lowlevel"$"average_loudness"
cat("Average_Loudness: ", average_loudness)
spectral_energy_mean = file.data$"lowlevel"$"spectral_energy"$"mean"
cat("Mean: ", spectral_energy_mean)
bpm = file.data$"rhythm"$"bpm"
cat("BPM: ", bpm)
key_key = file.data$"tonal"$"key_key"
cat("Key_key: ", key_key)
length = file.data$"metadata"$"audioproperties"$"length"
cat("Length: ", length)
average_loudness = file.data$"lowlevel"$"average_loudness"
cat("Average_Loudness: ", average_loudness)
spectral_energy_mean = file.data$"lowlevel"$"spectral_energy"$"mean"
cat("Mean: ", spectral_energy_mean)
bpm = file.data$"rhythm"$"bpm"
cat("BPM: ", bpm)
key_key = file.data$"tonal"$"key_key"
cat("Key_key: ", key_key)
length = file.data$"metadata"$"audio_properties"$"length"
cat("Length: ", length)
bpm = file.data$"rhythm"$"bpm"
# Task 1: Build a Batch File for Data Processing
# Step 0:
# install.packages("stringr")
library(stringr)
# Step 1:
list.dirs("Music")
# Step 2:
str_count(string = "Music/PeopleStuff/bla", pattern = "/")
sub = c(list.dirs("Music"))
sub.direc = c()
for (direc in sub){
if (str_count(direc, pattern = "/") == 2){
sub.direc = append(sub.direc, direc)
}
}
print(sub.direc)
# Step 3:
files = c()
for (sub in sub.direc){
file = list.files(sub)
if (sum(str_count(file, ".wav")) > 0){
files = append(files, file)
}
}
print(files)
code.to.process = c()
for (sub in sub.direc){
music = list.files(sub)
for (wav in music){
file = paste(sub, wav, sep = "/")
# print(file)
remove = str_sub(wav, 1, length(wav)-6)
track = str_split(remove, "-")
new.track = name[[1]][length(name[[1]])]
artist = name[[1]][length(name[[1]])-1]
album = str_split(sub, "/")
#print(album)
only.album = album[[1]][length(album[[1]])]
output = paste(artist, "-", only.album, "-", new.name,".json", sep = "")
#print(output)
exe = paste("streaming_extractor_music.exe", ' "', new.name,".wav", '" ', '"', output, '"', sep = "")
code.to.process = append(code.to.process, exe)
# print(code.to.process)
}
}
# print(code.to.process)
# Step 4
writeLines(code.to.process, "batfile.txt")
# Task 2
# Step 0
# install.packages("jsonlite")
# library(jsonlite)
# Step 1
list.files()
json.files = c()
for (file in list.files()){
if (str_count(string = file, pattern = ".json") > 0){
# json.files = append(json.files, file)
split.json = str_split(file, "-")
track = split.json[[1]][length(split.json[[1]])]
json.track = str_sub(track, start = 1, end = length(track)-7)
json.album = split.json[[1]][length(split.json[[1]])-1]
json.artist = split.json[[1]][length(split.json[[1]])-2]
print(json.track)
print(json.album)
print(json.artist)
}
}
# Step 2
file.data = fromJSON("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json")
names(file.data)
# Step 3
average_loudness = file.data$"lowlevel"$"average_loudness"
cat("Average_Loudness: ", average_loudness)
spectral_energy_mean = file.data$"lowlevel"$"spectral_energy"$"mean"
cat("Mean: ", spectral_energy_mean)
bpm = file.data$"rhythm"$"bpm"
cat("BPM: ", bpm)
key_key = file.data$"tonal"$"key_key"
cat("Key_key: ", key_key)
length = file.data$"metadata"$"audio_properties"$"length"
cat("Length: ", length)
